services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    restart: unless-stopped
    init: true
    environment:
      # Production settings
      NODE_ENV: production
      BASE_URL: ${BASE_URL:-http://localhost:3000}
      IS_DOCKER: "true"
      
      # Database connection (using separate parameters for Docker networking)
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-revelate}
      DB_USER: ${POSTGRES_USER:-user}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password}
      DB_SSL: "false"
      
      # Database pool settings
      DB_MAX_CONNECTIONS: "20"
      DB_IDLE_TIMEOUT: "30000"
      DB_CONNECT_TIMEOUT: "5000"
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:3000/api/health').then(r => r.json()).then(data => process.exit(data.success ? 0 : 1)).catch(() => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-revelate}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01_init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-revelate}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 300M

volumes:
  db_data:
    driver: local